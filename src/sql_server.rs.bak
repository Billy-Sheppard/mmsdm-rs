use crate::{mmsdm::dispatch, GetTable};
use futures::{AsyncRead, AsyncWrite};

impl crate::AemoFile {
    /// This function is meant to be used in conjunction with the iterator over
    /// the data contained within the AemoFile struct
    pub async fn load_data<S>(&self, client: &mut tiberius::Client<S>) -> crate::Result<()>
    where
        S: AsyncRead + AsyncWrite + Unpin + Send,
    {
        for file_key in self.data.keys() {
            match (
                file_key.data_set_name.as_str(),
                file_key.table_name.as_str(),
                file_key.version,
            ) {
                ("DISPATCH", "UNIT_SOLUTION", 2_i32) => {
                    let d: Vec<dispatch::DispatchUnitSolution2> = self.get_table()?;
                    let json = serde_json::to_string(&d)?;
                    client
                        .execute(
                            "exec InsertDispatchUnitSolution2 @P1, @P2",
                            &[&self.header.get_filename(), &json],
                        )
                        .await?;
                }
                _ => {
                    log::error("Unhandled file key {:?}", file_key);
                    continue;
                }
            }
        }
        Ok(())
    }
}
